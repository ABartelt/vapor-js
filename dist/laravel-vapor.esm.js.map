{"version":3,"file":"laravel-vapor.esm.js","sources":["../src/index.js"],"sourcesContent":["const axios = require('axios')\n\nlet assetUrlResolver = () => {\n    try {\n        return process.env.MIX_VAPOR_ASSET_URL\n            ? process.env.MIX_VAPOR_ASSET_URL\n            : '';\n    } catch (e) {\n        console.error('Unable to automatically resolve the asset URL. Use Vapor.withBaseAssetUrl() to specify it manually.')\n\n        throw e\n    }\n}\n\nclass Vapor\n{\n    /**\n     * Generate the S3 URL to an application asset.\n     */\n    asset(path) {\n        return assetUrlResolver() + '/' + path;\n    }\n\n    /**\n     * Set the base URL for assets.\n     */\n    withBaseAssetUrl(url) {\n        assetUrlResolver = () => url ? url : ''\n    }\n\n    /**\n     * Store a file in S3 and return its UUID, key, and other information.\n     */\n    async store(file, options = {}) {\n        const response = await axios.post(options.signedStorageUrl ? options.signedStorageUrl : '/vapor/signed-storage-url', {\n            'bucket': options.bucket || '',\n            'content_type': options.contentType || file.type,\n            'expires': options.expires || '',\n            'visibility': options.visibility || '',\n            ...options.data\n        }, {\n            baseURL: options.baseURL || null,\n            headers: options.headers || {},\n            ...options.options\n        });\n\n        let headers = response.data.headers;\n\n        if ('Host' in headers) {\n            delete headers.Host;\n        }\n\n        if (typeof options.progress === 'undefined') {\n            options.progress = () => {};\n        }\n\n        const cancelToken = options.cancelToken || ''\n\n        await axios.put(response.data.url, file, {\n            cancelToken: cancelToken,\n            headers: headers,\n            onUploadProgress: (progressEvent) => {\n                options.progress(progressEvent.loaded / progressEvent.total);\n            }\n        })\n\n        response.data.extension = file.name.split('.').pop()\n\n        return response.data;\n    }\n}\n\nmodule.exports = new Vapor();\n"],"names":["axios","require","assetUrlResolver","process","env","MIX_VAPOR_ASSET_URL","e","console","error","module","exports","asset","path","withBaseAssetUrl","url","store","file","options","post","signedStorageUrl","bucket","content_type","contentType","type","expires","visibility","data","baseURL","headers","response","Host","progress","put","cancelToken","onUploadProgress","progressEvent","loaded","total","extension","name","split","pop"],"mappings":"+MAAA,IAAMA,EAAQC,QAAQ,SAElBC,EAAmB,WACnB,IACI,OAAOC,QAAQC,IAAIC,oBACbF,QAAQC,IAAIC,oBACZ,GACR,MAAOC,GAGL,MAFAC,QAAQC,MAAM,uGAERF,IA8DdG,OAAOC,QAAU,wDArDbC,MAAA,SAAMC,GACF,OAAOV,IAAqB,IAAMU,KAMtCC,iBAAA,SAAiBC,GACbZ,EAAmB,kBAAMY,GAAY,OAMnCC,eAAMC,EAAMC,YAAAA,IAAAA,EAAU,+BACDjB,EAAMkB,KAAKD,EAAQE,iBAAmBF,EAAQE,iBAAmB,+BACpFC,OAAUH,EAAQG,QAAU,GAC5BC,aAAgBJ,EAAQK,aAAeN,EAAKO,KAC5CC,QAAWP,EAAQO,SAAW,GAC9BC,WAAcR,EAAQQ,YAAc,IACjCR,EAAQS,SAEXC,QAASV,EAAQU,SAAW,KAC5BC,QAASX,EAAQW,SAAW,IACzBX,EAAQA,yBATTY,GAYN,IAAID,EAAUC,EAASH,KAAKE,QAbA,MAexB,SAAUA,UACHA,EAAQE,UAGa,IAArBb,EAAQc,WACfd,EAAQc,SAAW,8BAKjB/B,EAAMgC,IAAIH,EAASH,KAAKZ,IAAKE,EAAM,CACrCiB,YAHgBhB,EAAQgB,aAAe,GAIvCL,QAASA,EACTM,iBAAkB,SAACC,GACflB,EAAQc,SAASI,EAAcC,OAASD,EAAcE,2BAM9D,OAFAR,EAASH,KAAKY,UAAYtB,EAAKuB,KAAKC,MAAM,KAAKC,MAExCZ,EAASH"}